{"version":3,"sources":["Components/Recruiter/Admin-Pages/Recruiter-Home.js","Constant/Env.js","Components/Candidate/Elements/QuestionsContainer.js","Components/Candidate/Pages/Talent-Test.js","Components/Candidate/Pages/Home.js","Components/Recruiter/Admin-Pages/Area.js","Components/Routes.js","App.js","serviceWorker.js","index.js","Images/astra-logo.png"],"names":["RecruiterLogin","props","handleUser","e","setState","user","target","value","handlePassword","password","handleLogin","state","history","push","alert","className","src","Logo","alt","this","onChange","name","placeholder","type","Button","icon","onClick","Icon","Component","baseURL","TalentTest","questions","results","Axios","get","then","res","JSON","parse","data","console","log","randomItems","Math","floor","random","randomQuestions","handleClick","map","item","content","answerok","answerTwo","answerThree","LoginForm","handleChange","bind","handleSubmit","event","preventDefault","onSubmit","class","readonly","tabindex","Area","catch","div","contact","result","time","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b35e37a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Logo from \"../../../Images/astra-logo.png\";\r\nimport { Button, Icon } from 'semantic-ui-react'\r\n\r\nclass RecruiterLogin extends Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n      user:'astra',\r\n      password:'123456'\r\n    }\r\n}\r\n\r\n\r\n\r\nhandleUser = (e)=> {\r\n  this.setState({user: e.target.value});\r\n}\r\nhandlePassword = (e) => {\r\n  this.setState({password: e.target.value});\r\n}\r\n\r\nhandleLogin = (e) => {\r\n  if(this.state.user === 'astra') {\r\n    this.props.history.push('/area')\r\n  }\r\n  else{alert(\"This user isn't registered\")}\r\n  \r\n}\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"login-recruiter\">\r\n        <img className=\"logo-astra\" src={Logo} alt=\"logo\" />\r\n        <div className=\"container-login-recruiter\">\r\n          <h3>\r\n            To get the applicant's history, Please enter your User name and\r\n            your Password\r\n          </h3>\r\n          <section className=\"section-login\">\r\n            <form className=\"form-login-recruiter\">\r\n              <p>User Name</p>\r\n              {/* value={this.user} */}\r\n              <input value={this.setState.user} onChange={this.handleUser} name=\"user\" placeholder=\"User Name\" />\r\n            </form>\r\n            <form className=\"form-login-recruiter\"> \r\n              <p>Password</p>\r\n              <input type=\"password\" value={this.setState.password} onChange={this.handlePassword} user=\"password\" placeholder=\"Password\" />\r\n            </form>\r\n            <Button icon className=\"button-login\" onClick={this.handleLogin}  type=\"submit\">\r\n                <Icon name='sign-in'/>\r\n            </Button>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default RecruiterLogin;\r\n","const baseURL = 'https://reaching-talent.herokuapp.com' ;\r\n\r\nexport default baseURL;\r\n","import React, { Component } from \"react\";\r\n\r\nclass QuestionsContainer extends Component {\r\n  constructor(props){\r\n    super(props);\r\n      this.question = props.question;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"questionsContainer\">\r\n        <div className=\"card\">\r\n          <p className=\"question\"> ({this.question})</p>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default QuestionsContainer;\r\n","import React, {Component} from 'react';\r\nimport Axios from 'axios';\r\nimport Logo from '../../../Images/astra-logo.png';\r\nimport Data from '../Elements/dataFalse.js';\r\nimport QuestionsContainer from '../Elements/QuestionsContainer.js';\r\nimport baseURL from '../../../Constant/Env';\r\n\r\n\r\nclass TalentTest extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      questions: [],\r\n      results: []\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n     Axios.get(baseURL + `/candidate`)\r\n       .then(res => {\r\n         const questions = JSON.parse(res.data);\r\n         this.setState({ questions });\r\n       })\r\n       .then(console.log())\r\n   }\r\n\r\nhandleClick(){\r\n  const randomItems = Math.floor(Math.random() * 7) + 1;\r\n  const randomQuestions = this.state.questions[randomItems];\r\n  console.log(this.state.questions);\r\n  console.log(randomQuestions);\r\n}\r\n\r\n//handleClickAnswer(answer, idQuestion){\r\n//  this.setState({\r\n//    results: {...this.state.results, [idQuestion]: idQuestion}\r\n//  })\r\n//}\r\n\r\n\r\nrender(){\r\n\r\n    if(this.state.questions === null) {\r\n      return (\r\n        <p>fetching</p>\r\n      )\r\n    } else {\r\n      return (\r\n\r\n\r\n    <div className= \"questions\">\r\n        <img className=\"logo-astra\" src={Logo} alt=\"logo\" />\r\n        <div className=\"container\">\r\n\r\n          <button onClick = { () => this.handleClick(this.state.questions)}>Start test\r\n          </button>\r\n\r\n\r\n        </div>\r\n\r\n        <ul>\r\n            {this.state.questions.map((item) => (\r\n               <li className=\"table\">\r\n                  <tbody>\r\n                    <h2>{item.content}</h2>\r\n                    <input type=\"radio\"  /> {item.answerok}\r\n                    <input type=\"radio\" /> {item.answerTwo}\r\n                    <input type=\"radio\" /> {item.answerThree}\r\n\r\n                    </tbody>\r\n                </li>\r\n              ))}\r\n        </ul>\r\n\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n}\r\n}\r\n\r\n  export default TalentTest;\r\n","import React, {Component} from 'react';\r\nimport Logo from \"../../../Images/astra-logo.png\";\r\nimport TalentTest from './Talent-Test.js'\r\n\r\nclass LoginForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n     this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('The test will begin');\r\n    event.preventDefault();\r\n    }\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"loginForm\">\r\n      <img className=\"logo-astra\" src={Logo} alt=\"logo\" />\r\n      <h1>Reaching Talent</h1>\r\n\r\n      <p>Guessing if you can be part of AstraZeneca's family?</p>\r\n      <p>Ẃelcome to our app.....</p>\r\n\r\n    <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Email\r\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n          </label>\r\n\r\n          <div class=\"field\">\r\n            <div class=\"checkbox\">\r\n              <input type=\"checkbox\" class=\"hidden\" readonly=\"\" tabindex=\"0\" />\r\n              <label>I agree to the Terms and Conditions</label>\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" onClick={() => this.props.history.push('/talent-test')} className=\"button\">Submit</button>\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n}\r\n\r\n\r\nexport default LoginForm;\r\n","import React, { Component } from \"react\";\r\nimport Logo from \"../../../Images/astra-logo.png\";\r\nimport Axios from \"axios\";\r\nimport baseURL from \"../../../Constant/Env\";\r\nimport { Button, Icon} from 'semantic-ui-react'\r\n\r\nclass Area extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: null\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    Axios.get(baseURL + `/recruiter`)\r\n      .then(res => {\r\n        const results = JSON.parse(res.data);\r\n        this.setState({ results });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n  handleClick() {\r\n    console.log(this.state.results);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.results === null) {\r\n      return <p>Loading</p>;\r\n    } else {\r\n      return (\r\n        <div className=\"results\">\r\n          <img className=\"logo-astra\" src={Logo} alt=\"logo\" />\r\n          <div className=\"container-login-recruiter\">\r\n            <Button icon onClick={() => this.props.history.push(\"/recruiter-login\")}>\r\n            <Icon name='sign-out' />\r\n            </Button>\r\n            <h2 className=\"title-area\">Candidates who passed the test.</h2>\r\n            <div>\r\n              <div className=\"all-results\">\r\n                {this.state.results.map(item => {\r\n                  return (\r\n                    <div div className=\"card\">\r\n                      <h4>Contact: {item.contact}</h4>\r\n                      <h5>Result: {item.result}</h5>\r\n                      <h5>Time: {item.time}</h5>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default Area;\r\n","import React, { Component } from \"react\";\r\nimport {HashRouter, Route, NavLink} from 'react-router-dom';\r\nimport RecruiterLogin from \"./Recruiter/Admin-Pages/Recruiter-Home\";\r\nimport LoginForm from \"./Candidate/Pages/Home\";\r\n\r\nimport TalentTest from './Candidate/Pages/Talent-Test.js';\r\n\r\nimport Area from \"./Recruiter/Admin-Pages/Area\";\r\n\r\n\r\n\r\nclass Routes extends Component{\r\n    render(){\r\n        return(\r\n            <HashRouter>\r\n                <Route exact path='/login-form' component={LoginForm}/>\r\n                <Route exact path='/recruiter-login' component={RecruiterLogin}/>\r\n\r\n              \r\n\r\n                <Route exact path='/area' component={Area}/>\r\n                <Route exact path='/talent-test' component={TalentTest}/>\r\n\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\nexport default Routes;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\n\r\nimport RecruiterLogin from './Components/Recruiter/Admin-Pages/Recruiter-Home';\r\nimport Routes from './Components/Routes';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n  <div>\r\n\r\n    <Routes/>\r\n\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/astra-logo.dcddc6b5.png\";"],"sourceRoot":""}